

========== LESSON 1 ==========

Bibliography:

Patterns of Enterprise Application Architecture, Martin Fowler

Domain is the field which is being worked on.

Domain Model

  Structured Languages and OO Languages have different diagram systems.

Domain Model Abstraction Level: Conceptual, Logic, Design

Conceptual Analysis - Discovers business requirements and their relations regardless of what system is used.

System Analyst describes the relationships and entities but still regardless of Programming Paradigm or Technology.

Project Director describes the entities but tied to a Programming Paradigm

A Class has a Name, Attributes and Methods/Services, which are the actions the Class takes

Analysis described the PROBLEM, Design describes the SOLUTION.

Unified Process

Normalization is a way of Standardizing procedures

========== LESSON 2 ==========

Attributes

  Should not have multivalues
  Cannot be composed of several attributes, like a long form address

At the Conceptual Model Classes don't have Methods described yet.

<<unique>> identifies which attributes are unique

Derived Attributes are attributes that depend on previous ones like such:

-Price
-Coupon
-Final Price = Price - Coupon


=========== LESSON 3 ===========

System Requirements

Use cases

A structured document that specifies the trade of information between the systems.

Specifies interactions between the System Actors.

Concepts are always nouns. User, Purchase, Payment, etc.

=========== LESSON 4 ===========

At the UML stage each concept is called a CONCEPT.

Camelcase is used for attribute names in UML

=========== LESSON 5 ===========

Instances of Objects

Associations are made with a line with ROLE under it and the value, called MULTIPLICITY on top of it.

MULTIPLICITY has a minimum and maximum value

The person can have 0 up to unlimited cars
Person 1<------------------------- 0..* Car

A person can drive many cars
Person 1>>* <-------------------- 0..* Eyes

0, 2, 5 (Zero or Two or Five)

ASSOCIATIONS

Dependency Relationship; a user has many cars and once deleted the cars must also go or be reassigned.

A dotted line shows that a Concept is dependent on another

If on one side 1 is required, the other side is dependent on it.

AUTOASSOCIATIONS

A user can follow many users and can be followed by many users.

CONCEPTS AND ASSOCIATIONS

If the association has the same name as the Concept add it in plural.

When the class must be independent it shouldn't require an association.

=============WHOLE/PART RELATIONSHIP=============

AGGREGATION and COMPOSITION

AGGREGATION is when a class is both a child and a part of a whole but it's not unique.
It's drawn with an empty diamond.

CAR <--------- Tire
PERSON <----------- Finger

COMPOSITION is when a concept is unique to the parent Concept and an integral part of it.
It is drawn with a solid diamond. The numericality is usually 0 or 1.

PERSON <------------ Brain
PERSON <------------ SIN Number

===============ASSOCIATION CLASS===============

An association instance is referenced by both the Unique IDs of their associations.
The association should also be unique.

Rose played by Kate Winslet is identified by Actor: Kate Winslet and Movie: Titanic

An association will always have one numericality at the left side and many on the right side.

============ENUMERATIONS===============

Considered a half-way idea between a Concept and an Attribute

Enumerations are declared as constants and they are already written in all CAPS at the UML level.
They are attributes that are STATIC and predictable. Examples are States, Provinces, etc.

They are composed of a concept that has a finite number of possible values, whose number are meaningful to the business at hand.

PAYMENT:
<<enum constant>>WAITING FOR PAYMENT: int
<<enum constant>>SENT: int
<<enum constant>>DELIVERED: int
<<enum constant>> RETURNED: int
<<enum constant>> CANCELED: int

DAY OF THE WEEK:
<<enum constant>> Sunday: int
<<enum constant>> Monday: int
<<enum constant>> Tuesday: int
<<enum constant>> Wednesday: int
<<enum constant>> Thursday: int
<<enum constant>> Friday: int
<<enum constant>> Saturday: int

Most modern languages save dates in the Unix Timestamp.


=======INHERITANCE========

Is there a generic Concept that can capture two other concepts such as Nurse or Doctor?

Nurse, Doctor, Surgeon EXTENDS the parent class of PERSON.

Car, Truck or Motorcycle EXTENDS the parent class of VEHICLE.

If the difference is not big enough it can be simplified into simply a different attribute.

Total Inheritance is Preferred to Partial Inheritance.

An ABSTRACT PARENT class that cannot be instantiated and only gives birth to child classes is represented with its title in ITALICS.

The INHERITANCE ARROW goes from the child classes towards the parent class. It's an empty arrow.

============PRIMITIVE===========

It's a part of a more complex Concept, like Location,

Is an attribute that does not change

============DIAGRAMMING===========

Concepts of similar standing usually are represented in a similar size and level.

============WEAK ENTITY===========

In a relational database, a weak entity is an entity that cannot be uniquely identified by its attributes alone; therefore, it must use a foreign key in conjunction with its attributes to create a primary key.
The foreign key is typically a primary key of an entity it is related to.

<<weak>> can be put above the title to identify a Weak Entity.

============DIRECTED ASSOCIATION===========

In UML models, directed association relationships are associations that are navigable in only one direction.
A directed association indicates that control flows from one classifier to another; for example an actor to a use case. This flow of control means that only one of the association ends specifies navigability.

If you use association end names, you do not typically need to name an association. You can, however, name any association to describe the nature of the relationship between the two classifiers.

A directed association is displayed as a solid line with an arrow that indicates the direction of navigation.

They are represented by a regular one way arrow.

============CANDIDATE KEY===========

A Candidate Key is unique but is not the Primary Key.

============ACID===========

(Atomicity, Consistency, Isolation, Durability)

============REST===========

Representational State Transfer (REST), or RESTful, web services provide interoperability between computer systems on the Internet. REST-compliant web services allow the requesting systems to access and manipulate textual representations of web resources by using a uniform and predefined set of stateless operations. Other kinds of web services, such as WSDL and SOAP, expose their own arbitrary sets of operations.[1]

==========POINTER=========

A variable has an address in the system, that is the pointer.

=========CRLF============

Carriage Return Line Feed

===============UML Diagrams with Enterprise Architect================

Classifier

======STEREOTYPES=========


======CONSTRAINTS==========

Constraints are often show in curly brackets

{startDate -> endDate}

==========================
